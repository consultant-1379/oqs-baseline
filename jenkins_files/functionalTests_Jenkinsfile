pipeline {
  agent {
    node {
      label 'stratus_slave'
    }
  }
  // The options directive is for configuration that applies to the whole job.
  options {
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 40, unit: 'MINUTES')
    timestamps()
  }
  stages {
    stage('Clean') {
      steps {
        sh '''
        pid=$(sudo fuser -n tcp 80 2>&1 | awk '{print $2}'); [[ ! -z "$pid" ]] && (echo "Killing the previous running port 80 process."; sudo kill $pid) || echo "Port 80 is free to use."
        # Kill any running containers
        running=$(docker ps -a -q| wc -l)
        if [ "$running" -gt "0" ];then
           echo "Killing containers"
           docker rm -f $(docker ps -a -q)
           docker system prune -f
        fi
        '''
      }
    }
    stage('Verify Image Version') {
      steps {
        script {
          sh '''
          if (git log -1 | grep "\\[PATCH\\]"); then
            echo 'Valid [PATCH] Version Found';
          elif (git log -1 | grep "\\[MINOR\\]"); then
            echo 'Valid [MINOR] Version Found';
          elif (git log -1 | grep "\\[MAJOR\\]"); then
            echo 'Valid [MAJOR] Version Found';
          else
            echo 'Pre-Code Review Failed. Commit message must contain one of the following: [PATCH]/[MINOR]/[MAJOR]'
            exit 1
          fi;
          '''
        }
      }
    }
    stage('Setup') {
      steps {
        sh '''
        echo -e "LDAP_URL=LDAPS://ldap-egad.internal.ericsson.com:3269 \nBASE_DN_LIST=OU=CA,OU=User,OU=P001,OU=ID,OU=Data,DC=ericsson,DC=se:OU=External,OU=P017,OU=ID,OU=Data,DC=ericsson,DC=se:OU=CA,OU=SvcAccount,OU=P001,OU=ID,OU=Data,DC=ericsson,DC=se \nSEARCH_FILTER=(name={{username}})" >> .env
        chmod -R 777 .
        ./oqsJenkinsTestSetup.sh
        '''
      }
    }
    stage('Smoke Tests') {
      steps {
        sh '''
        ./smokeTests.sh
        '''
      }
    }
  }
  // The post build actions
  post {
    always {
      script {
        echo 'Allure Report'
        // archiveArtifacts artifacts: '**/oqs-smoketests/allure-results/**'
        // sh 'sudo chmod -R o+xw oqs-smoketests/allure-results'
        // allure([
        //   includeProperties: false,
        //   jdk: 'JDK1.8.0_77',
        //   properties: [],
        //   reportBuildPolicy: 'ALWAYS',
        //   results: [[path: 'oqs-smoketests/allure-results']]
        // ])
      }
    }
    success {
      echo 'Pipeline Successfully Completed'
      sh "sudo rm -fr ${env.WORKSPACE}/*"
    }
    failure {
      emailext(attachLog: true,
               attachmentsPattern: 'currentBuild.rawBuild.log, oqs-smoketests/images/*.png',
               from: 'enmadm100@lmera.ericsson.se',
               to: "${env.GERRIT_EVENT_ACCOUNT_EMAIL}",
               subject: "Failed: Jenkins Job ${env.JOB_NAME}",
               body: "Job: ${env.JOB_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nThe Job build URL: ${env.BUILD_URL}")
      sh "sudo rm -fr ${env.WORKSPACE}/*"
    }
  }
}
